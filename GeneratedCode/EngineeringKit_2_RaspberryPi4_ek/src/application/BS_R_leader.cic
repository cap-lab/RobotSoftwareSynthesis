/************************************
 *
 * File : dualLED.cic
 * Date : Nov 9, 2022 1:03 PM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
// ##DEFINE_SECTION::END

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int port_leader;
STATIC int group_led;
STATIC int port_led;
// ##DEFINE_PORT_SECTION::END

// ##DEFINE_MULTICAST_PORT_SECTION::START
// ##DEFINE_MULTICAST_PORT_SECTION::END
static int count = 0;
static int increase = 0;
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    port_leader = PORT_INITIALIZE(TASK_ID, "isLeader");
    UFMulticastPort_Initialize(TASK_ID, "led", &group_led, &port_led);
// ##INIT_PORT_SECTION::END

// ##INIT_MULTICAST_PORT_SECTION::START
// ##INIT_MULTICAST_PORT_SECTION::END

    // TODO: task initialize code        #ListenAlarmFrom("Guard")
    count = 0;
    increase = 1;
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    // TODO: task main code
    int dataLength;
    int leader = 0;
	uem_result result;
    SEMO_LED led = {FALSE, FALSE};
    UFPort_ReadFromQueue(port_leader, (unsigned char *)&leader, sizeof(int), 0, &dataLength);
    if (leader == 1) {
        if (count <= 0) {
            increase = 1;
        } else if (count > 50) {
            increase = -1;
        }
        if (increase == 1) {
            led.left = TRUE;
            led.right = TRUE;
        }
        count += increase;
    } else {
        count = 0;
    } 
    result = UFMulticastPort_WriteToBuffer(group_led, port_led, (unsigned char *)&led, sizeof(SEMO_LED), &dataLength);
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}



/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    int dataLength;
    SEMO_LED led = {FALSE, FALSE};
    UFMulticastPort_WriteToBuffer(group_led, port_led, (unsigned char *)&led, sizeof(SEMO_LED), &dataLength);
}

TASK_CODE_END


