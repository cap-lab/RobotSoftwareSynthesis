/************************************
 *
 * File : checkDistanceByLDS.cic
 * Date : Oct 28, 2022 10:46 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include "dynamixel_sdk.h"
#include "semo_direction.h"

#define VELOCITY_ADDRESS ((uint16_t)104)
#define MAX_LINEAR_VELOCITY 256
#define MIN_LINEAR_VELOCITY              -MAX_LINEAR_VELOCITY  
#define INITIAL_LINEAR_X (MAX_LINEAR_VELOCITY/3)


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int group;
STATIC int port;
STATIC int previous_direction;
// ##DEFINE_PORT_SECTION::END

static void setVelocity(int left_velocity, int right_velocity);
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "wheel", &group, &port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
    previous_direction = STOP_;
    setVelocity(0, 0);

}


/////////////////////////////////////
// go code
/////////////////////////////////////

static void setVelocity(int left_velocity, int right_velocity) {
    SEMO_LOG_DEBUG("velocity address %d velocity l %d r %d", VELOCITY_ADDRESS, left_velocity, right_velocity);
    for (uint8_t i = DXL_ID_13 ; i <= DXL_ID_16 ; i++) {
        if (i <= DXL_ID_14) {
            SEMO_write4ByteTxRx(i, VELOCITY_ADDRESS, left_velocity);
        } else {
            SEMO_write4ByteTxRx(i, VELOCITY_ADDRESS, right_velocity);
        }
    }
}

TASK_GO
{
    int direction=STOP_;
    int dataNum;
    uem_result result;
    result = UFMulticastPort_ReadFromBuffer(group, port, (unsigned char *)&direction, sizeof(int), &dataNum);
    ERRIFGOTO(result, EXIT_);
    switch(direction) {
        case STOP_:
            if (previous_direction != STOP_) {
                setVelocity(0, 0);
                previous_direction = direction;
            }
            break;
        case FORWARD_:
            if (previous_direction != FORWARD_) {
                setVelocity(-INITIAL_LINEAR_X, INITIAL_LINEAR_X);
            }
                previous_direction = direction;
            break;
        case BACKWARD_:
            if (previous_direction != BACKWARD_) {
                setVelocity(INITIAL_LINEAR_X, -INITIAL_LINEAR_X);
                previous_direction = direction;
            }
            break;
        case RIGHT_:
            if (previous_direction != RIGHT_) {
                setVelocity((INITIAL_LINEAR_X/7)*1.43*4, (INITIAL_LINEAR_X/7)*1.43*4);
                previous_direction = direction;
            }
            break;
        case LEFT_:
            if (previous_direction != LEFT_) {
                setVelocity((-INITIAL_LINEAR_X/7)*1.43*4, (-INITIAL_LINEAR_X/7)*1.43*4);
                previous_direction = direction;
            }
            break;
        default:
            SEMO_LOG_ERROR("Wheel Control : direction(%d) is not correct.", direction);
            break;
    }
EXIT_:
    if(result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    setVelocity(0, 0);
}

TASK_CODE_END
