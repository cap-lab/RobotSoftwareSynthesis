/************************************
 *
 * File : checkDistanceByLDS.cic
 * Date : Oct 28, 2022 10:46 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include "semo_direction.h"
#include <iostream>
#include <cstdlib>
#include <string>
#include <cctype>
// #include <thread>
// #include <chrono>
#define PAHO_MQTTPP_VERSIONS
#include "mqtt/async_client.h"


TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////

// ##DEFINE_PORT_SECTION::START
STATIC int group_wheel;
STATIC int port_wheel;
// ##DEFINE_PORT_SECTION::END

static const std::string SERVER_ADDRESS = "192.168.50.162:1883";
static const std::string TOPIC = "direction";
static const std::string CLIENT_ID = THIS_ROBOT_NAME "_dir";
static mqtt::async_client cli(SERVER_ADDRESS, CLIENT_ID);
//static mqtt::async_client cli(SERVER_ADDRESS);

/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "wheel", &group_wheel, &port_wheel);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code

    auto connOpts = mqtt::connect_options_builder().clean_session(true).finalize();
    try {
        // Start consumer before connecting to make sure to not miss messages
        cli.start_consuming();
        auto tok = cli.connect(connOpts);
        auto rsp = tok->get_connect_response();
        cli.subscribe(TOPIC, 1)->wait();  //QOS = 1;

        std::cout << "Waiting for messages on topic: '" << TOPIC << "'" << std::endl;
    }
    catch (const mqtt::exception& exc) {
        std::cerr << "\n  " << exc << std::endl;
    }
}


/////////////////////////////////////
// go code
/////////////////////////////////////

TASK_GO
{
    mqtt::const_message_ptr messagePointer;
    int direction = STOP_;
	int numOfWrite;
    uem_result result = ERR_UEM_NOERROR;

    if (cli.try_consume_message(&messagePointer))
    {
        std::string payload = messagePointer -> get_payload_str();
        if (!payload.compare("FORWARD")){
            direction = FORWARD_;
        }else if(!payload.compare("RIGHT")){
            direction = RIGHT_;
        }else if(!payload.compare("BACKWARD")){
            direction = BACKWARD_;
        }else if(!payload.compare("LEFT")){
            direction = LEFT_;
        }else if(!payload.compare("STOP")){
            direction = STOP_;
        }
        result = UFMulticastPort_WriteToBuffer(group_wheel, port_wheel, (unsigned char *)&direction, sizeof(int), &numOfWrite);
        std::cout << "direction from remote: " << direction << std::endl;
    }
    if (result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("Communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    try {
        if (cli.is_connected()) {
            std::cout << "\nShutting down and disconnecting from the MQTT server..." << std::flush;
            cli.unsubscribe(TOPIC)->wait();
            cli.stop_consuming();
            cli.disconnect()->wait();
            std::cout << "OK" << std::endl;
        }
    }
    catch (const mqtt::exception& exc) {
        std::cerr << exc << std::endl;
    }
}

TASK_CODE_END
