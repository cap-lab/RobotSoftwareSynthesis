/************************************
 *
 * File : checkDistanceByLDS.cic
 * Date : Oct 28, 2022 10:46 AM
 *
*************************************/

/////////////////////////////////////
// include header section
/////////////////////////////////////
#include "dynamixel_sdk.h"
#include "semo_led.h"
// #include <thread>
// #include <chrono>

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////
#define LED_ADDRESS ((uint16_t)65)
// ##DEFINE_PORT_SECTION::START
STATIC SEMO_LED previous_led = {SEMO_LED_OFF, SEMO_LED_OFF};
STATIC int group;
STATIC int port;
// ##DEFINE_PORT_SECTION::END

static void setLed(int left, int right);
/////////////////////////////////////
// init code
/////////////////////////////////////

TASK_INIT
{
// ##INIT_PORT_SECTION::START
    UFMulticastPort_Initialize(TASK_ID, "led", &group, &port);
// ##INIT_PORT_SECTION::END
    
    // TODO: task initialize code
    setLed(SEMO_LED_OFF, SEMO_LED_OFF);
    
}


/////////////////////////////////////
// go code
/////////////////////////////////////

static void setLed(int left, int right) {
    SEMO_LOG_DEBUG("led address %d led l %d r %d", LED_ADDRESS, left, right);
    for (uint8_t i = DXL_ID_13 ; i <= DXL_ID_16 ; i++) {
        if (i <= DXL_ID_14) {
            if (left == SEMO_LED_ON || left == SEMO_LED_OFF) {
                SEMO_write1ByteTxRx(i, LED_ADDRESS, left);
            }
        } else {
            if (right == SEMO_LED_ON || right == SEMO_LED_OFF) {
                SEMO_write1ByteTxRx(i, LED_ADDRESS, right);
            }
        }
    }
}

TASK_GO
{
    SEMO_LED led;
    int dataNum;
    uem_result result;
    result = UFMulticastPort_ReadFromBuffer(group, port, (unsigned char *)&led, sizeof(SEMO_LED), &dataNum);
    if (previous_led.left != led.left || previous_led.right != led.right) {
        if ((led.left == SEMO_LED_ON || led.left == SEMO_LED_OFF) &&
            (led.right == SEMO_LED_ON || led.right == SEMO_LED_OFF)) {
            setLed(led.left, led.right);
            previous_led.left = led.left;
            previous_led.right = led.right;
        }
    }
EXIT_:
    if(result != ERR_UEM_NOERROR) {
        SEMO_LOG_ERROR("communication error(%X)", result);
    }
}


/////////////////////////////////////
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{
    // TODO: task wrapup code
    setLed(SEMO_LED_OFF, SEMO_LED_OFF);
}

TASK_CODE_END
