/////////////////////////////////////
// include header section
/////////////////////////////////////

// ##DEFINE_SECTION::START
#include "UFTimer.h"
// ##DEFINE_SECTION::END

TASK_CODE_BEGIN

/////////////////////////////////////
// global definition
/////////////////////////////////////
// MULTICAST VARIABLE DEFINE
#pragma pack(push, 1)
STATIC struct _Robot_groupB_event_FINISH {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_groupB_event_FINISH = {{-1, -1}, {0,}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_groupB_event_FINISH = {&Robot_groupB_event_FINISH.header, Robot_groupB_event_FINISH.body};
#pragma pack(push, 1)
STATIC struct _Robot_groupA_event_FINISH {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_groupA_event_FINISH = {{-1, -1}, {0,}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_groupA_event_FINISH = {&Robot_groupA_event_FINISH.header, Robot_groupA_event_FINISH.body};

// SHARED DATA VARIABLE DEFINE
#pragma pack(push, 1)
STATIC struct _Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0 {
    MULTICAST_PACKET_HEADER header;
    VARIABLE_TYPE_searchedColor body[2];
} Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0 = {{-1, -1}, {0,}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0 = {&Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0.header, Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0.body};
#pragma pack(push, 1)
STATIC struct _Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0 {
    MULTICAST_PACKET_HEADER header;
    VARIABLE_TYPE_searchedColor body[2];
} Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0 = {{-1, -1}, {0,}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0 = {&Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0.header, Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0.body};

// GROUP ACTION VARIABLE DEFINE
#pragma pack(push, 1)
STATIC struct _group_action_3 {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} group_action_3 = {{-1, -1}, {3}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_group_action_3 = {&group_action_3.header, group_action_3.body};
#pragma pack(push, 1)
STATIC struct _group_action_4 {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} group_action_4 = {{-1, -1}, {4}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_group_action_4 = {&group_action_4.header, group_action_4.body};

// LEADER VARIABLE DEFINE
#pragma pack(push, 1)
STATIC struct _Robot_groupB_leader_robotId_Robot_groupB {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_groupB_leader_robotId_Robot_groupB = {{-1, -1}, {0}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_groupB_leader_robotId_Robot_groupB = {&Robot_groupB_leader_robotId_Robot_groupB.header, Robot_groupB_leader_robotId_Robot_groupB.body};
#pragma pack(push, 1)
STATIC struct _Robot_groupB_leader_heartbeat_Robot_groupB {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_groupB_leader_heartbeat_Robot_groupB = {{-1, -1}, {0}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_groupB_leader_heartbeat_Robot_groupB = {&Robot_groupB_leader_heartbeat_Robot_groupB.header, Robot_groupB_leader_heartbeat_Robot_groupB.body};
#pragma pack(push, 1)
STATIC struct _Robot_groupA_leader_robotId_Robot_groupA {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_groupA_leader_robotId_Robot_groupA = {{-1, -1}, {0}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_groupA_leader_robotId_Robot_groupA = {&Robot_groupA_leader_robotId_Robot_groupA.header, Robot_groupA_leader_robotId_Robot_groupA.body};
#pragma pack(push, 1)
STATIC struct _Robot_groupA_leader_heartbeat_Robot_groupA {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_groupA_leader_heartbeat_Robot_groupA = {{-1, -1}, {0}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_groupA_leader_heartbeat_Robot_groupA = {&Robot_groupA_leader_heartbeat_Robot_groupA.header, Robot_groupA_leader_heartbeat_Robot_groupA.body};
#pragma pack(push, 1)
STATIC struct _Robot_leader_robotId_Robot {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_leader_robotId_Robot = {{-1, -1}, {0}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_leader_robotId_Robot = {&Robot_leader_robotId_Robot.header, Robot_leader_robotId_Robot.body};
#pragma pack(push, 1)
STATIC struct _Robot_leader_heartbeat_Robot {
    MULTICAST_PACKET_HEADER header;
    semo_int32 body[1];
} Robot_leader_heartbeat_Robot = {{-1, -1}, {0}};
#pragma pack(pop)
STATIC MULTICAST_PACKET packet_Robot_leader_heartbeat_Robot = {&Robot_leader_heartbeat_Robot.header, Robot_leader_heartbeat_Robot.body};

// GROUPING VARIABLE DEFINE
#pragma pack(push, 1)
STATIC struct _grouping {
    GROUPING_PACKET_HEADER header;
    semo_int32 robot_num;
    SEMO_GROUPING_SHARED robot_info_list[7];
    semo_uint8 body[84];
} grouping = {{-1, -1, -1}, 0,};
#pragma pack(pop)
STATIC GROUPING_PACKET packet_grouping = {&grouping.header, &grouping.robot_num, grouping.robot_info_list, grouping.body};

// MULTICAST PORT SECTION
STATIC MULTICAST_PORT multicast_port_list[2] = {
    {"Robot_groupB_FINISH", -1, -1, "ControlRobot_groupB_FINISH", -1, &Robot_groupB_event_FINISH, &packet_Robot_groupB_event_FINISH, 4, -1, "Robot_groupB_FINISH_out", -1, -1},
    {"Robot_groupA_FINISH", -1, -1, "ControlRobot_groupA_FINISH", -1, &Robot_groupA_event_FINISH, &packet_Robot_groupA_event_FINISH, 4, -1, "Robot_groupA_FINISH_out", -1, -1},
};

// SHARED DATA PORT SECTION
STATIC SHARED_DATA_PORT shared_data_port_list[2] = {
    {"Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0", -1, -1, NULL, NULL, l_Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0_set_searchedColor_listen, &Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0, &packet_Burger_3_Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0, 8, -1},
    {"Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0", -1, -1, NULL, NULL, l_Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0_set_searchedColor_listen, &Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0, &packet_Burger_3_Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_searchV3_0, 8, -1},
};

// GROUP ACTION PORT SECTION
STATIC GROUP_ACTION_PORT group_action_port_list[2] = {
    {"Robot_groupA_SEARCHIN_MODE_SEARCHIN_Search_Burger_searchV3", -1, -1, NULL, l_Burger_3_group_action_set_group_action_listen, &group_action_3, &packet_group_action_3, 4, -1},
    {"Robot_groupB_SEARCHIN_MODE_SEARCHIN_Search_Burger_searchV3", -1, -1, NULL, l_Burger_3_group_action_set_group_action_listen, &group_action_4, &packet_group_action_4, 4, -1},
};

// LEADER PORT SECTION
STATIC LEADER_PORT leader_port_list[3] = {
    {"Robot_groupB_leader_robotId", -1, -1, &Robot_groupB_leader_robotId_Robot_groupB, &packet_Robot_groupB_leader_robotId_Robot_groupB, -1, NULL, NULL, l_Burger_3_leader_set_robot_id_listen, 
    "Robot_groupB_leader_heartbeat", -1, -1, &Robot_groupB_leader_heartbeat_Robot_groupB, &packet_Robot_groupB_leader_heartbeat_Robot_groupB, -1, NULL, NULL, l_Burger_3_leader_set_heartbeat_listen, ID_GROUP_Robot_groupB, 16},
    {"Robot_groupA_leader_robotId", -1, -1, &Robot_groupA_leader_robotId_Robot_groupA, &packet_Robot_groupA_leader_robotId_Robot_groupA, -1, NULL, NULL, l_Burger_3_leader_set_robot_id_listen, 
    "Robot_groupA_leader_heartbeat", -1, -1, &Robot_groupA_leader_heartbeat_Robot_groupA, &packet_Robot_groupA_leader_heartbeat_Robot_groupA, -1, NULL, NULL, l_Burger_3_leader_set_heartbeat_listen, ID_GROUP_Robot_groupA, 16},
    {"Robot_leader_robotId", -1, -1, &Robot_leader_robotId_Robot, &packet_Robot_leader_robotId_Robot, -1, NULL, NULL, l_Burger_3_leader_set_robot_id_listen, 
    "Robot_leader_heartbeat", -1, -1, &Robot_leader_heartbeat_Robot, &packet_Robot_leader_heartbeat_Robot, -1, NULL, NULL, l_Burger_3_leader_set_heartbeat_listen, ID_GROUP_Robot, 16},
};

// GROUPING PORT SECTION
STATIC GROUPING_PORT grouping_port_list[1] = {
    {"Robot_SEARCH_GROUPING_grouping", -1, -1, NULL, NULL, l_Burger_3_grouping_set_shared_data_listen, &grouping, &packet_grouping, 12, -1},
};

/////////////////////////////////////
// init code
/////////////////////////////////////
STATIC void multicast_port_init() {
    for (int i = 0 ; i<sizeof(multicast_port_list)/sizeof(MULTICAST_PORT) ; i++)
    {
        UFPort_Initialize(THIS_TASK_ID, multicast_port_list[i].channel_port_name, &(multicast_port_list[i].channel_port_id));
        UFMulticastPort_Initialize(THIS_TASK_ID, multicast_port_list[i].multicast_port_name, &(multicast_port_list[i].multicast_group_id), &(multicast_port_list[i].multicast_port_id));
        UFMulticastPort_Initialize(THIS_TASK_ID, multicast_port_list[i].multicast_out_port_name, &(multicast_port_list[i].multicast_out_group_id), &(multicast_port_list[i].multicast_out_port_id));
    }
}

STATIC void shared_data_port_init() {
    for (int i = 0 ; i<sizeof(shared_data_port_list)/sizeof(SHARED_DATA_PORT) ; i++)
    {
        UFMulticastPort_Initialize(THIS_TASK_ID, shared_data_port_list[i].multicast_port_name, &(shared_data_port_list[i].multicast_group_id), &(shared_data_port_list[i].multicast_port_id));
    }
}

STATIC void group_action_port_init() {
    for (int i = 0 ; i<sizeof(group_action_port_list)/sizeof(GROUP_ACTION_PORT) ; i++)
    {
        UFMulticastPort_Initialize(THIS_TASK_ID, group_action_port_list[i].multicast_port_name, &(group_action_port_list[i].multicast_group_id), &(group_action_port_list[i].multicast_port_id));
    }
}

STATIC void leader_port_init() {
    for (int i = 0 ; i < sizeof(leader_port_list)/sizeof(LEADER_PORT) ; i++)
    {
        UFMulticastPort_Initialize(THIS_TASK_ID, leader_port_list[i].robot_id_port_name, &(leader_port_list[i].robot_id_group_id), &(leader_port_list[i].robot_id_port_id));
        UFMulticastPort_Initialize(THIS_TASK_ID, leader_port_list[i].heartbeat_port_name, &(leader_port_list[i].heartbeat_group_id), &(leader_port_list[i].heartbeat_port_id));
    }
}

STATIC void grouping_port_init() {
    for (int i = 0 ; i<sizeof(grouping_port_list)/sizeof(GROUPING_PORT) ; i++)
    {
        UFMulticastPort_Initialize(THIS_TASK_ID, grouping_port_list[i].multicast_port_name, &(grouping_port_list[i].multicast_group_id), &(grouping_port_list[i].multicast_port_id));
    }
}

TASK_INIT
{
	SEMO_LOG_INFO("INIT");
    multicast_port_init();
    shared_data_port_init();
    group_action_port_init();
    leader_port_init();
    grouping_port_init();
}

/////////////////////////////////////
// go code
/////////////////////////////////////
STATIC void multicast_port_receive() {
    int data_len;
    for (int i = 0 ; i<sizeof(multicast_port_list)/sizeof(MULTICAST_PORT) ; i++)
    {
        UFMulticastPort_ReadFromBuffer(multicast_port_list[i].multicast_group_id, multicast_port_list[i].multicast_port_id, (unsigned char*) multicast_port_list[i].buffer, multicast_port_list[i].size + sizeof(MULTICAST_PACKET_HEADER), &data_len);
        if (data_len > 0) 
        {
            if (multicast_port_list[i].before_time < multicast_port_list[i].packet->header->time
                 && multicast_port_list[i].packet->header->sender_robot_id != THIS_ROBOT_ID) 
            {
                if (channel_port_write(multicast_port_list[i].channel_port_id, multicast_port_list[i].packet->data, multicast_port_list[i].size, FALSE) > 0) 
                {
                	    multicast_port_list[i].before_time = multicast_port_list[i].packet->header->time;
                        UFMulticastPort_WriteToBuffer(multicast_port_list[i].multicast_out_group_id, multicast_port_list[i].multicast_out_port_id, (unsigned char*) multicast_port_list[i].buffer, multicast_port_list[i].size + sizeof(MULTICAST_PACKET_HEADER), &data_len);
                }
            }
        }
    }
}

STATIC void shared_data_port_receive() {
    int data_len;
    for (int i = 0 ; i<sizeof(shared_data_port_list)/sizeof(SHARED_DATA_PORT) ; i++)
    {
        UFMulticastPort_ReadFromBuffer(shared_data_port_list[i].multicast_group_id, shared_data_port_list[i].multicast_port_id, (unsigned char*) shared_data_port_list[i].buffer, shared_data_port_list[i].size + sizeof(MULTICAST_PACKET_HEADER), &data_len);
        if (data_len > 0) 
        {
	         if (shared_data_port_list[i].before_time < shared_data_port_list[i].packet->header->time 
                 && shared_data_port_list[i].packet->header->sender_robot_id != THIS_ROBOT_ID) 
	         {
        		    shared_data_port_list[i].lib_set_func(shared_data_port_list[i].packet->data);
        		    shared_data_port_list[i].before_time = shared_data_port_list[i].packet->header->time;
         	 }
        }
    }
}

STATIC void group_action_port_receive() {
    int data_len;
    semo_int64 cur_time = 0;
    UFTimer_GetCurrentTime(THIS_TASK_ID, &cur_time);
    for (int i = 0 ; i<sizeof(group_action_port_list)/sizeof(GROUP_ACTION_PORT) ; i++)
    {
        UFMulticastPort_ReadFromBuffer(group_action_port_list[i].multicast_group_id, group_action_port_list[i].multicast_port_id, (unsigned char*) group_action_port_list[i].buffer, group_action_port_list[i].size + sizeof(MULTICAST_PACKET_HEADER), &data_len);
        if (data_len > 0) 
        {
	        if (group_action_port_list[i].before_time < group_action_port_list[i].packet->header->time 
                 && group_action_port_list[i].packet->header->sender_robot_id != THIS_ROBOT_ID) 
	        {
        	    group_action_port_list[i].lib_set_func(*(int*)group_action_port_list[i].packet->data, group_action_port_list[i].packet->header->sender_robot_id, cur_time);
        	    group_action_port_list[i].before_time = group_action_port_list[i].packet->header->time;
            }
        }
    }
}

STATIC void leader_port_receive() {
    int data_len;
    for (int i = 0 ; i < sizeof(leader_port_list)/sizeof(LEADER_PORT) ; i++)
    {
        UFMulticastPort_ReadFromBuffer(leader_port_list[i].robot_id_group_id, leader_port_list[i].robot_id_port_id, (unsigned char*) leader_port_list[i].robot_id_buffer, leader_port_list[i].size, &data_len);
        if (data_len > 0) 
        {
	         if (leader_port_list[i].robot_id_before_time < leader_port_list[i].robot_id_packet->header->time
                 && leader_port_list[i].robot_id_packet->header->sender_robot_id != THIS_ROBOT_ID) 
             {
        		    leader_port_list[i].robot_id_set_func(leader_port_list[i].group_id, *((int*)leader_port_list[i].robot_id_packet->data));
        		    leader_port_list[i].robot_id_before_time = leader_port_list[i].robot_id_packet->header->time;
             }
        }
        UFMulticastPort_ReadFromBuffer(leader_port_list[i].heartbeat_group_id, leader_port_list[i].heartbeat_port_id, (unsigned char*) leader_port_list[i].heartbeat_buffer, leader_port_list[i].size, &data_len);
        if (data_len > 0) 
        {
	         if (leader_port_list[i].heartbeat_before_time < leader_port_list[i].heartbeat_packet->header->time
                 && leader_port_list[i].heartbeat_packet->header->sender_robot_id != THIS_ROBOT_ID) 
             {
        		    leader_port_list[i].heartbeat_set_func(leader_port_list[i].group_id, *((int*)leader_port_list[i].heartbeat_packet->data));
        		    leader_port_list[i].heartbeat_before_time = leader_port_list[i].heartbeat_packet->header->time;
             }
        }
    }
}

STATIC void grouping_port_receive() {
    int data_len;
    for (int i = 0 ; i<sizeof(grouping_port_list)/sizeof(GROUPING_PORT) ; i++)
    {
        UFMulticastPort_ReadFromBuffer(grouping_port_list[i].multicast_group_id, grouping_port_list[i].multicast_port_id, (unsigned char*) grouping_port_list[i].buffer, sizeof(grouping), &data_len);
        if (data_len > 0) 
        {
	         if (grouping_port_list[i].before_time < grouping_port_list[i].packet->header->time 
                 && grouping_port_list[i].packet->header->sender_robot_id != THIS_ROBOT_ID) 
	         {
        		    grouping_port_list[i].lib_set_func(grouping_port_list[i].packet->header->mode_id, grouping_port_list[i].packet->robot_info_list, *grouping_port_list[i].packet->shared_robot_num, grouping_port_list[i].packet->data, grouping_port_list[i].size);
        		    grouping_port_list[i].before_time = grouping_port_list[i].packet->header->time;
         	 }
        }
    }
}

TASK_GO
{
    multicast_port_receive();
    shared_data_port_receive();
    group_action_port_receive();
    leader_port_receive();
    grouping_port_receive();
}

/////////////////////////////////////src/application/FakeBot_0_listen.cic
// wrapup code
/////////////////////////////////////

TASK_WRAPUP
{

}

TASK_CODE_END