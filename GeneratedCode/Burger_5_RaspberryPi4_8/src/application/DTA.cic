#include "UFTimer.h"
#include <iostream>
#include <random>
#include <unistd.h>

#define GROUPING_THRESHOLD 30
#define MAX_SELECTED_COUNT 5

STATIC int port_mode;
STATIC int port_result;

typedef struct _ROBOT_DB
{
    semo_int32 robot_id;
    semo_int32 group;
    semo_int32 count;
} ROBOT_DB;

static int count = 0;
static int count_finish_count = 0;
static int selected_count = 0;
static int selected_count_finish_count = MAX_SELECTED_COUNT;
static int last_shared_robot_num = 0;
static int current_selecting_mode = -1;
static int sum_of_workload = 0;
static float threshold = 0.0;

TASK_CODE_BEGIN

static void parameterWrapup()
{
    count = 0;
    count_finish_count = GROUPING_THRESHOLD + 10;
    selected_count = 0;
    selected_count_finish_count = MAX_SELECTED_COUNT;
    last_shared_robot_num = 0;
    current_selecting_mode = -1;
    sum_of_workload = 0;
    threshold = 0.0;
}

TASK_INIT
{
    SEMO_LOG_INFO("INIT");
    UFPort_Initialize(THIS_TASK_ID, "mode", &port_mode);
    UFPort_Initialize(THIS_TASK_ID, "result", &port_result);
    parameterWrapup();
}

static int getSumOfWorkload()
{
    semo_int32 num_of_group_candidate = LIBCALL(group, get_grouping_candidate_num);
    SEMO_GROUP *candidate_group_list = LIBCALL(group, get_grouping_candidate_list);
    int sum = 0;
    for (int i = 0; i < num_of_group_candidate; i++)
    {
        sum += candidate_group_list[i].min;
    }
    return sum;
}

static float getThreshold()
{
    semo_int32 num_of_group_candidate = LIBCALL(group, get_grouping_candidate_num);
    SEMO_GROUP *candidate_group_list = LIBCALL(group, get_grouping_candidate_list);
    float max_ratio = 0.0;
    float min_ratio = 1.0;
    for (int i = 0; i < num_of_group_candidate; i++)
    {
        float task_ratio = 1.0 / candidate_group_list[i].min;
        if (max_ratio < task_ratio)
        {
            max_ratio = task_ratio;
        }
        if (task_ratio < min_ratio)
        {
            min_ratio = task_ratio;
        }
    }
    return max_ratio + min_ratio;
}

static void parameterInit(int mode)
{
    count = 0;
    count_finish_count = rand() % 10 + GROUPING_THRESHOLD;
    last_shared_robot_num = 0;
    selected_count = 0;
    selected_count_finish_count = MAX_SELECTED_COUNT;
    current_selecting_mode = mode;
    sum_of_workload = getSumOfWorkload();
    threshold = getThreshold();
}

static void firstTimeSelectGroup()
{
    semo_int32 num_of_group_candidate = LIBCALL(group, get_grouping_candidate_num);
    SEMO_GROUP *candidate_group_list = LIBCALL(group, get_grouping_candidate_list);
    SEMO_GROUP *selected_group = &candidate_group_list[rand() % num_of_group_candidate];
    ROBOT_DB data = {THIS_ROBOT_ID, selected_group->id, 0};
    LIBCALL(group, set_shared_data_grouping, (semo_uint8 *)&data, sizeof(ROBOT_DB));
}

static float getTaskProb(int target_group)
{
    int num_assigned_robot = 0;
    SEMO_GROUP group_info;
    LIBCALL(group, get_group_info, target_group, &group_info);
    semo_int32 shared_robot_num = LIBCALL(group, get_shared_robot_num);
    for (int i = 0; i < shared_robot_num; i++)
    {
        ROBOT_DB shared_db;
        LIBCALL(group, get_shared_data_grouping, i, (semo_uint8 *)&shared_db, sizeof(ROBOT_DB));
        if (target_group == shared_db.group)
        {
            num_assigned_robot++;
        }
    }
    return (shared_robot_num * group_info.min) * 1.0 / (sum_of_workload * num_assigned_robot);
}

static void selectGroup(int current_mode)
{
    ROBOT_DB my_db;
    LIBCALL(group, get_shared_data_grouping, 0, (unsigned char *)&my_db, sizeof(ROBOT_DB));
    semo_int32 last_selected_group = my_db.group;
    float task_prob = getTaskProb(last_selected_group);
    if (task_prob < 1)
    {
        semo_int32 num_of_group_candidate = LIBCALL(group, get_grouping_candidate_num);
        SEMO_GROUP *candidate_group_list = LIBCALL(group, get_grouping_candidate_list);
        std::vector<float> probList;
        for (int i = 0; i < num_of_group_candidate; i++)
        {
            if (candidate_group_list[i].id == last_selected_group)
            {
                probList.push_back(task_prob);
            }
            else
            {
                probList.push_back(1 - task_prob);
            }
        }
        std::random_device rd;
        std::mt19937 gen(rd());
        std::discrete_distribution<int> d{probList.cbegin(), probList.cend()};
        SEMO_GROUP *selected_group = candidate_group_list + d(gen);
        if (selected_group->id != last_selected_group)
        {
            my_db.robot_id = THIS_ROBOT_ID;
            my_db.group = selected_group->id;
            my_db.count += 1;
        }
    }
    LIBCALL(group, set_shared_data_grouping, (unsigned char *)&my_db, sizeof(ROBOT_DB));

    semo_int32 shared_robot_num = LIBCALL(group, get_shared_robot_num);
    if (last_shared_robot_num < shared_robot_num)
    {
        count = 0;
        last_shared_robot_num = shared_robot_num;
    }
    else
    {
        count++;
    }
}

static float getTaskRatio(int target_group)
{
    int num_assigned_robot = 0;
    SEMO_GROUP group_info;
    LIBCALL(group, get_group_info, target_group, &group_info);
    semo_int32 shared_robot_num = LIBCALL(group, get_shared_robot_num);
    for (int i = 0; i < shared_robot_num; i++)
    {
        ROBOT_DB shared_db;
        LIBCALL(group, get_shared_data_grouping, i, (semo_uint8 *)&shared_db, sizeof(ROBOT_DB));
        if (target_group == shared_db.group)
        {
            num_assigned_robot++;
        }
    }
    return num_assigned_robot * 1.0 / group_info.min;
}

static int stopCheck(int mode)
{
    int result = TRUE;
    std::vector<float> task_ratio_list;
    semo_int32 num_of_group_candidate = LIBCALL(group, get_grouping_candidate_num);
    SEMO_GROUP *candidate_group_list = LIBCALL(group, get_grouping_candidate_list);
    for (int i = 0; i < num_of_group_candidate; i++)
    {
        task_ratio_list.push_back(getTaskRatio(candidate_group_list[i].id));
    }
    for (int i = 0; i < num_of_group_candidate; i++)
    {
        for (int j = 0; j < num_of_group_candidate; j++)
        {
            if (std::abs(task_ratio_list.at(i) - task_ratio_list.at(j)) > threshold ||
                task_ratio_list.at(i) < 1 || task_ratio_list.at(j) < 1)
            {
                result = FALSE;
                break;
            }
        }
        if (result == FALSE)
            break;
    }
    return result;
}

TASK_GO
{
    semo_int32 mode;
    int length = 0;
    uem_result result;
    result = UFPort_GetNumOfAvailableData(port_mode, 0, &length);
    ERRIFGOTO(result, _EXIT);
    if (length > 0)
    {
        result = UFPort_ReadFromQueue(port_mode, (unsigned char *)&mode, sizeof(mode), 0, &length);
        ERRIFGOTO(result, _EXIT);
        SEMO_LOG_INFO("Start Select Group (Mode %d)", mode);
        LIBCALL(group, set_grouping_state, mode, SEMO_GROUP_SELECTION_INITIALIZE);
        parameterInit(mode);
        firstTimeSelectGroup();
    }
    else if (current_selecting_mode >= 0)
    {
        semo_int8 selected;
        selectGroup(current_selecting_mode);
        selected = stopCheck(current_selecting_mode);
        if (selected == TRUE)
        {
            if (selected_count == 0)
            {
                selected_count_finish_count = rand() % MAX_SELECTED_COUNT;
            }
            selected_count += 1;
        }
        else
        {
            selected_count = 0;
        }
    }

    if (selected_count_finish_count < selected_count || count_finish_count < count)
    {
        ROBOT_DB shared_db;
        LIBCALL(group, get_shared_data_grouping, 0, (semo_uint8 *)&shared_db, sizeof(ROBOT_DB));
        SEMO_LOG_INFO("Group Selected (Mode %d, Group %d)", current_selecting_mode, shared_db.group);
        result = UFPort_WriteToBuffer(port_result, (unsigned char *)&shared_db.group, sizeof(semo_int32), 0, &length);
        LIBCALL(group, set_grouping_state, current_selecting_mode, SEMO_GROUP_SELECTION_WRAPUP);
        parameterWrapup();
    }
_EXIT:
    if (result != ERR_UEM_NOERROR)
    {
        SEMO_LOG_ERROR("Error Code (%X)", result);
    }
    return;
}

TASK_WRAPUP
{
    SEMO_LOG_INFO("WRAP UP");
}

TASK_CODE_END

#undef GROUPING_THRESHOLD
