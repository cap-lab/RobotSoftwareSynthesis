#include "UFTimer.h"
#include <unistd.h>

STATIC int port_group_state;

TASK_CODE_BEGIN

TASK_INIT
{
	SEMO_LOG_INFO("INIT");
    UFPort_Initialize(THIS_TASK_ID, "group_state", &port_group_state);
}

semo_int32 checkLeaderHeartBeat(semo_int32 group_id) {
    semo_int32 leader = ROBOT_ID_MAX;
    if (LIBCALL(leader, avail_heartbeat_leader, group_id)) {
        leader = LIBCALL(leader, get_heartbeat_leader, group_id);
    }
    return leader;
}

void updateTime(semo_int32 group_id) {
    semo_int64 current_time;
    UFTimer_GetCurrentTime(THIS_TASK_ID, &current_time);
    LIBCALL(leader, set_last_time, group_id, current_time);
}

semo_int64 checkTime(semo_int32 group_id) {
    semo_int64 last_time;
    semo_int64 current_time;
    UFTimer_GetCurrentTime(THIS_TASK_ID, &current_time);
    last_time = LIBCALL(leader, get_last_time, group_id);
    return current_time - last_time;
}

void checkLeaderSelected(semo_int32 group_id) {
    semo_int32 leader_id = checkLeaderHeartBeat(group_id);
    if (leader_id <= THIS_ROBOT_ID) {
        semo_int32 current_leader_id = LIBCALL(leader, get_leader, group_id);
        LIBCALL(leader, set_leader_selection_state, group_id, LEADER_SELECTION_SELECTED);
        if (leader_id < current_leader_id) {
            LIBCALL(leader, set_leader, group_id, leader_id);
        }
    }
}

semo_int32 checkLeaderCandidate(semo_int32 group_id) {
    semo_int32 robot_id;
    semo_int32 leader = LIBCALL(leader, get_leader, group_id);
    if(LIBCALL(leader, avail_robot_id_leader, group_id))
    {
        robot_id = LIBCALL(leader, get_robot_id_leader, group_id);
        if(leader > robot_id)
        {
            LIBCALL(leader, set_leader, group_id, robot_id);
            leader = robot_id;
        }
    }
    return leader;
}

void emitHeartBeat(semo_int32 group_id) {
    updateTime(group_id);
    LIBCALL(leader, set_heartbeat_leader, group_id, THIS_ROBOT_ID);
}

void setRobotAsLeader(semo_int32 group_id) {
    LIBCALL(leader, set_leader_selection_state, group_id, LEADER_SELECTION_SELECTED);
    emitHeartBeat(group_id);
}

void leaderSelect(semo_int32 group_id) {
    semo_int32 leader = checkLeaderCandidate(group_id);
    if(leader == THIS_ROBOT_ID) 
    {
    	if(checkTime(group_id) > LEADER_SELECTION_THRESHOLD) {
    	    setRobotAsLeader(group_id);
    	} else {
            LIBCALL(leader, set_robot_id_leader, group_id, THIS_ROBOT_ID);
        }
    } else {
        checkLeaderSelected(group_id);
    }
}

semo_int32 checkNewLeader(semo_int32 group_id){
    semo_int32 changed = FALSE;
    semo_int32 robot_id;
    semo_int32 cur_leader_id;
    robot_id = checkLeaderCandidate(group_id);
    if (robot_id < THIS_ROBOT_ID){
        LIBCALL(leader, set_leader_selection_state, group_id, LEADER_SELECTION_NOT_SELECTED);
        LIBCALL(leader, set_leader, group_id, robot_id);
        changed = TRUE;
    }
    robot_id = checkLeaderHeartBeat(group_id);
    cur_leader_id = LIBCALL(leader, get_leader, group_id);
    if (robot_id < cur_leader_id) {
        LIBCALL(leader, set_leader_selection_state, group_id, LEADER_SELECTION_SELECTED);
        LIBCALL(leader, set_leader, group_id, robot_id);
        changed = TRUE;
    }
    return changed;
}

void checkLeaderMalfunctioned(semo_int32 group_id) {
    int leader_id = checkLeaderHeartBeat(group_id);
    if (leader_id == ROBOT_ID_MAX) {
        if (checkTime(group_id) > LEADER_HEARTBEAT_THRESHOLD) {
            LIBCALL(leader, set_leader_selection_state, group_id, LEADER_SELECTION_NOT_SELECTED);
            LIBCALL(leader, set_leader, group_id, THIS_ROBOT_ID);
            updateTime(group_id); 
        }
    } else {
        updateTime(group_id); 
    }
}

TASK_GO
{
    semo_int32 group_state[2];
    int count = 0;
    int length = 0;
    uem_result result;
    result = UFPort_GetNumOfAvailableData(port_group_state, 0, &count);
    ERRIFGOTO(result, _EXIT);
    for (count = count / sizeof(group_state); count > 0 ; count--) {
        UFPort_ReadFromQueue(port_group_state, (unsigned char*) group_state, sizeof(group_state), 0, &length);
        if (group_state[1] == TRUE) {
            LIBCALL(leader, set_leader_selection_state, group_state[0], LEADER_SELECTION_NOT_SELECTED);
            LIBCALL(leader, set_leader, group_state[0], THIS_ROBOT_ID);
            updateTime(group_state[0]); 
        } else {
            LIBCALL(leader, set_leader_selection_state, group_state[0], LEADER_SELECTION_STOP);
        }
    }

    for (count = 0 ; count < group_num ; count++) {
        LEADER_SELECTION_STATE leader_state = LIBCALL(leader, get_leader_selection_state, group_list[count]);
        switch(leader_state) {
            case LEADER_SELECTION_STOP:
                break;
            case LEADER_SELECTION_NOT_SELECTED:
	            leaderSelect(group_list[count]);
                break;
            case LEADER_SELECTION_SELECTED:
                if (LIBCALL(leader, get_leader, group_list[count]) == THIS_ROBOT_ID) {
                    semo_int32 changed = checkNewLeader(group_list[count]);
                    if (changed == FALSE) {
                        emitHeartBeat(group_list[count]);
                    }
                } else {
                    checkLeaderMalfunctioned(group_list[count]);
                }
                break;
            default:
                SEMO_LOG_ERROR("wrong leader state (group: %d, state: %d)", group_list[count], leader_state);
        }
    }
_EXIT:
    return;
}

TASK_WRAPUP
{
	SEMO_LOG_INFO("WRAP UP");
}

TASK_CODE_END
